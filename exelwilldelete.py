import logging
import random
import time
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)


user_balances = {}
user_items = {}
user_last_claim = {}


shop_items = {
    "Luck": {"price": 20, "description": "–°—Ä–∞–∑—É –¥–≤–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞."},
}

DAILY_REWARD = 100


def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 0  
    if user_id not in user_items:
        user_items[user_id] = [] 
    if user_id not in user_last_claim:
    update.message.reply_text('–î–∞—Ä–æ–≤–∞ –º—ã —Ç—É—Ç –∫–æ—Å—Ç–∏ –±—Ä–æ—Å–∞–µ–º –Ω–∞–ø–∏—à–∏ –º–∞–ª—è–≤—É /roll –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∞, /shop —á—Ç–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å, –∏–ª–∏ /daily —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –ª–∞–≤—ç—à–µ—á–∫—É.')

def roll_dice(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id

    win_number = 6
    win_amount = 25  
    lose_amount = 10

    if dice_roll == win_number:
        user_balances[user_id] += win_amount
        update.message.reply_text(f'–ü—Ä–æ–∫—Ä—É—Ç {dice_roll}! üé≤ —Ç—ã –≤—ã–∏–≥—Ä–∞–ª ${win_amount}! —Ç–≤–æ–π –±–∞–ª–∏–∫ ${user_balances[user_id]}.')
    else:
         user_balances[user_id] -= lose_amount
         update.message.reply_text(f'–ü—Ä–æ–∫—Ä—É—Ç {dice_roll}. –ü—Ä–æ–∏–≥—Ä–∞–ª –Ω–∞ —Å—Ç–∞–≤–∫–∞—Ö —Ç–≤–æ–π –±–∞–ª–∏–∫ ${user_balances[user_id]}.')

    if "Luck" in user_items.get(user_id, []):
      
        second_dice_roll = random.randint(1, 6)
        total_roll = dice_roll + second_dice_roll
        update.message.reply_text(f'–°—Ä–∞–∑—É –¥–≤–∞: {second_dice_roll}. –¢–æ—Ç–∞–ª—å–Ω–æ: {total_roll}')
        if total_roll == 6:
            user_balances[user_id] += win_amount
            update.message.reply_text(f'–¢—ã –≤—ã–∏–≥—Ä–∞–ª ${win_amount}! –í–æ—Ç —Ç–µ–±–µ –ª–∞–≤—ç—à–µ—á–∫–∞${user_balances[user_id]}.')
        else:
            update.message.reply_text(f'–ü—Ä–æ–∏–≥—Ä–∞–ª –Ω–∞ —Å—Ç–∞–≤–∫–∞—Ö {total_roll}.–¢–≤–æ–π –±–∞–ª–∏–∫ ${user_balances[user_id]}.')

def shop(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    reply_text = "–≠—Ç–æ —à–æ–ø –∫—Ä–∞–∫–µ–Ω–∞:\n\n"
    for item, details in shop_items.items():
        price = details["price"]
        description = details["description"]
        reply_text += f"‚Ä¢ {item}: ${price} - {description}\n"

    reply_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π /buy <item_name> –∏ –≤—ã–±–µ—Ä–∏ –µ–≥–æ."
    update.message.reply_text(reply_text)


def buy_item(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if len(context.args) == 0:
        update.message.reply_text('–°–ª—É—à–∞–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —à–æ–ø /shop —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å  –ø—Ä–µ–¥–º–µ—Ç—ã.')
        return

    item_name = ' '.join(context.args)
    if item_name in shop_items:
        item_price = shop_items[item_name]["price"]
        if user_balances.get(user_id, 0) >= item_price:
            user_balances[user_id] -= item_price
            user_items[user_id].append(item_name)
            update.message.reply_text(f'–£ —Ç–µ–±—è –µ—Å—Ç—å {item_name}! —Ç–≤–æ–π –±–∞–ª–∏–∫ ${user_balances[user_id]}.')
        else:
            update.message.reply_text(f'–õ–∞–≤—ç –Ω–µ—Ç—É! –ë–æ–º–∂–∞—Ä–∞ {item_name}. –ù–µ —Å–º–æ—Ç—Ä–∏!!! ${user_balances.get(user_id, 0)}.')
    else:
        update.message.reply_text(f'–¢–∞–∫–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ —É –Ω–∞—Å –Ω–µ—Ç—É.')

def daily_reward(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    current_time = datetime.now()

    if user_id in user_last_claim:
        last_claim_time = user_last_claim[user_id]
        if last_claim_time and current_time - last_claim_time < timedelta(days=1):
            time_remaining = timedelta(days=1) - (current_time - last_claim_time)
            hours, remainder = divmod(time_remaining.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            update.message.reply_text(f'–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ {hours} —á–∞—Å–∞ {minutes} –º–∏–Ω—É—Ç—ã.')
            return

    
    user_balances[user_id] += DAILY_REWARD
    user_last_claim[user_id] = current_time
    update.message.reply_text(f'–õ–∞–≤—ç—à–µ—á–∫–∞ ${DAILY_REWARD}! –ë–∞–ª–∏–∫ —Ä–∞—Å—Ç–µ—Ç ${user_balances[user_id]}.')


def balance(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    balance = user_balances.get(user_id, 0)
    update.message.reply_text(f'–¢–≤–æ–π –±–∞–ª–∏–∫ –¥–∞–≤–∞–π —á—Ç–æ–± –±–æ–ª—å—à–µ –±—ã–ª–æ!: ${balance}.')

def error(update: Update, context: CallbackContext) -> None:
    logger.warning(f'Update {update} caused error {context.error}')

def main() -> None:
  
    updater = Updater("your token")


    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("roll", roll_dice))
    dispatcher.add_handler(CommandHandler("shop", shop))
    dispatcher.add_handler(CommandHandler("buy", buy_item))
    dispatcher.add_handler(CommandHandler("daily", daily_reward))
    dispatcher.add_handler(CommandHandler("balance", balance))


    dispatcher.add_error_handler(error)


    updater.start_polling()


    updater.idle()

if __name__ == '__main__':
    main()
